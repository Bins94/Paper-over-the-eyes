# Tutorial

## A gentle introduction to fuzzing C++ code with AFL and libFuzzer
http://jefftrull.github.io/c++/clang/llvm/fuzzing/sanitizer/2015/11/27/fuzzing-with-sanit\
izers.html

## AFL tutorial
https://www.evilsocket.net/2015/04/30/fuzzing-with-afl-fuzz-a-practical-example-afl-vs-bi\
nutils/

## S2E
https://dslab.epfl.ch/pubs/s2e-tocs.pdf
# A survey of symbol execution techniques
https://arxiv.org/pdf/1610.00502.pdf

# Instrument & infrastruct

## Kernel KCOV introduction
https://gitlab-beta.engr.illinois.edu/ejclark2/linux/commit/5c9a8750a6409c63a0f01d51a9024\
861022f6593

## fsanitize-coverage
http://clang.llvm.org/docs/SanitizerCoverage.html#tracing-data-flow
https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
https://gcc.gnu.org/ml/gcc/2017-07/msg00046.html
https://davejingtian.org/2017/06/01/understanding-kcov-play-with-fsanitize-coveragetrace-\
pc-from-the-user-space/

## cgroup
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/resource_ma\
nagement_guide/ch01

## UBSAB
scripts/Makefile.ubsan: add CFLAGS to Makefile
lib/ubsan.c: implement of handle function

## systemtap path
https://www.systutorials.com/docs/linux/man/7-stappaths/

# Theory & Fuzz POC

## Fuzz summery
https://www.mwrinfosecurity.com/our-thinking/15-minute-guide-to-fuzzing/


## SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept Exploits
https://www.informatics.indiana.edu/xw7/papers/p2139-you.pdf
基于patch和漏洞描述确认syscall以及相应的一些分析加权,重现漏洞,直接用涉及的内核函数所对应的corpus进行fuzz会不会更有效

## AFL 优化
https://lifeasageek.github.io/class/cs52700-fall16/pages/prog-assignment-1.html
拆分分支条件, 渐进式协助命中目标, 用到 QEMU 的 TCG

## ThreadSanitizer
https://clang.llvm.org/docs/ThreadSanitizer.html
tutorial
https://github.com/google/sanitizers/wiki/ThreadSanitizerAlgorithm
在访问内存周围插入指令调处理函数+运行时调用处理函数, 维护针对变量的shadow state, 报错由状态机检测产生

## T-fuzz
https://nebelwelt.net/publications/files/18Oakland.pdf
除了常规的fuzz, 针对性的越过部分检查做局部fuzz, 再判断bug存在的条件, NCC/CC 检查

## symdriver
http://pages.cs.wisc.edu/~swift/papers/symdrive_osdi2012.pdf
framework:路径优先级，数据注入，I/O符号化模拟
Execution tracing:版本对比
instrument:代码级别修改？
checker:内核驱动模块状态跟踪通过实现自己的

## Linux driver verification
https://pdfs.semanticscholar.org/773e/780f13727ecf4205072c14562872a07df903.pdf
指针分析和动态数据分析
符号化验证
状态验证
终止状态验证
并发

## DeepState fuzz
https://blog.trailofbits.com/2019/01/22/fuzzing-an-api-with-deepstate-part-1/
1. multiple main/test, a tree a fixed sequence. Run multiple test.
2. longer call sequence( libfuzz/afl limit?)
3. rand() --> deepstate_type() ( syzkaller hardcode in syscall script)
4. OneOf choose calls to execute
https://blog.trailofbits.com/2019/01/23/fuzzing-an-api-with-deepstate-part-2/
1. language base mutate, universalmutator.

## What afl fuzz bad at
https://blog.regehr.org/archives/1238
Recognize special behavier as crash
Guid fuzz reach these behavier

## https://arxiv.org/pdf/1711.09362.pdf
Symexec (KLEE):targeted search strategy, shortest path search algorithm
Solution:
1. Fuzzer as a initial exploration, targeted symbolic execution explore uncovered functio\
n.
2. Symbolic execution for generating test case, fuzz them.
Contribution:
1. target search functionality in KLEE.
2. initial explore without state search, devote more time to harder-to-reach function.
3. high coverage.
Trade off the cost of integrity(SMT solve) and randomness(blind fuzz).
FS mode: fuzz for a limited amount of time, sonar-search as path-search strategy. Handwri\
te test case could be better.
SF mode: symbolic execution generate test case, use them as seed input, fuzz them.
Fuzz:AFL
Symexec:KLEE, explore call-graph, when a state was detected, explore the consecutive stat\
e. Drop those out of call-graph.
Orchestrator: 1. call-graph info of progrom. 2. function node with regular argument.
Individual target(directed) fuzz
Fuzz miss bug in "lesser called" functions of a program. Symexec miss bug in deeper funct\
ion of a program.
evaluate:
1. function coverage
2. coverage depth

## https://arxiv.org/abs/1903.02981
KLEE generate seed input with a fixed target( bug)
Execute with the input, check if call stack is the same as call stack information of bug.\
 If not, the bug can't be reproduce. If yes, the path constrain is satisfied( symbolic ar\
gument). Just fuzz it.

## VUzzer: Application-aware Evolutionary Fuzzing(ndss 17)
data-flow
Check if the input is branch-relative dynamicly. Instrument cmp/lea instruction( only inp\
ut is `directly` used by condition)
control-flow
weighted coverage( weighted base-block)
magic number
detect magic number

## moonshine: base on syzkaller


## Data flow sensitive fuzzing
https://www.usenix.org/system/files/sec20spring_gan_prepub.pdf
FTI(fuzzing-driven tain inference):
  If a monitored variable value is tainted while mutate some bytes of the input, that can\
 be infer the variable is depend on the input.( For accurating labor-intensive analysis(V\
Uzzer). Can't cover the case while the variable is implict effect by external syscalls.)
  1.Byte-level mutate
  BLT(S, pos)
  2.Variable value monitoring
  Instrumnet application with special value tracking code. Only track the variable that u\
sed in path constrain.
  3.Taint inference
  testing testcase BLM(S, pos), check if value of variable changes. Infer is var is depen\
d on pos-th byte of input seed S.
  (Specail case: var1=input1; while(var1--){var2++;} if(var2==const){..})
Taint-Guided Mutation:
  Weighted mutate `input byte` position base on taint from FTI. Prioritize some byte of u\
ntouched branches.
  Weight which branch to explore.
Conformance-Guided Evolution
  flip the input to expected value of condition constrain. Collect the code coverage and \
classify by path. If input and branch are higher conformance, prioritize it with higher w\
eight. Seeds with higher conformance are more likely to yield test cases exercising untou\
ched branches. More bit of operands is equal has more conformance.
GreyOne = FTI+TGM+CGE

## Fuzz for deeply nested branches
https://arxiv.org/pdf/1905.12228.pdf
` A branch constraint is the predicate in the conditional statement that guards the branc\
h. The branch is reachable only if (1) the conditional statement is reachable, and (2) th\
e branch constraint is satisfied.`
1: Indentify all condition that target condition depend on( condition use variables which is also used by target condition). Randamly mutate the input for condition constrain that target condition depend on.
2: Choise those input satify those constrain that target condition constrain depend on, mutate to reach target condition constrain( solve the condition constrain that target don't depend on).
3. If 2 can't still reach target condition. Don't mutate the input of 2( indenpent from target). Mutate other input to find a solution satified all condition( Both target depend on and target).

## Learning to Fuzz from Symbolic Execution with Application to Smart Contracts
https://files.sri.inf.ethz.ch/website/papers/ccs19-ilf.pdf
This is fuzzer for smart contract.
1. symbolic excution expert generate test case program.
2. Learn the sequence of testcase, calculate the probability of call using mackov decison\
 process. Imitation learning the expert program, as fuzz policy, fuzz...
