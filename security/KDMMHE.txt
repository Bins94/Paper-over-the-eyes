# Kernel driver mmap handler exploitation( by 2017-09-18 – Mateusz Fruba)
https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-mmap-exploitation-whitepaper-2017-09-18.pdf

## 简述
这篇 paper 报告的不是一个漏洞，而是内核在设备驱动的 mmap 调用的实现有薄弱环节，有被利用的分析，具体的漏洞需要针对特定的设备去分析和设备。主要是设备驱动实现 mmap 系统调用的处理函数，能将内存映射到用户空间进行读写（即使实现为空），结合地址的 overflow 甚至可以将整个物理内存都映射到用户空间，然后搜寻标定该用户空间权限 uid 的地址，设置为 root，进行提权。

## 文章内容的整理
1. Introduction to Kernel Drivers
简述了内核驱动模块的框架，主要是用户空间像打开文件一样打开设备，然后执行 mmap 等一系列系统调用时，相应内核会陷如驱动登记的 struct file_operations 所赋值的函数指针。 

2. Kernel mmap Handler
* 给出具体实验代码介绍对设备进行 mmap 系统调用的时候，内核的代码执行路径，最后可以在 /proc/$PID/maps 这个内核的接口看到用户空间的进程地址空间布局，在给定的映射地址，有 mmap 调用的映射到用户空间的内存块。
* 假设 mmap 处理函数为空的情形。当设备驱动的 mmap 实现是空函数时，/proc/$PID/maps 依然可以看到给定的映射区域，这时对这段内存的读写会触发错误，有些架构会触发 panic（可能是 page_fault 处理的？）。
* 当 mmap 处理函数实现使用到 vma->vm_ops。使用 vma->vm_ops 时，映射依然可以成功（ mmap 除了 vma_ops 只是接近空实现），读写操作时会触发登记在 vm_operations_struct 结构体下的 int(*fault) 成员函数。接下来文章演示了，如果 fault 基于给定地址进行计算，调用 virt_to_page（计算物理页） 和 get_page（获得页指针） 后， 映射返回的地址将会指向某个物理页，透过这个地址索引，就能毫无代价地越过 mmap 映射的空间去进行读写操作，结果同样也是触发了 fault 函数（也就是 mmap 没有了边界）。

3. Typical mmap Handler Issues
* 调用 remap_pfn_range 这个函数时，对一些用户空间传入的参数没有进行验证。remap_pfn_range 函数用于将内核的内存区域映射到用户空间，这里主要提出没有针对 vma->vm_pgoff（物理地址） 和直接用 vma->vm_end - vma->vm_start 算出映射长度造成的风险。这会导致用户空间可以直接任意读写 kernel 的内存。
* 整数溢出的问题。这里指出传递给 remap_pfn_range 一些参数，计算溢出可能绕过了一些检查，导致读写内核空间的内存。还提到了 32 位的 mmap2 接口可以映射更大的范围。
* 有符合数的溢出。类上，有符号数的溢出也能绕过一些检查。
这一个段落是基于 2 章的 mmap 来讲哪些驱动的 mmap 实现有可能有风险。

4. Exploiting mmap Handlers
* 理论上应该以怎样的方式插入...
（这里假设有具体的驱动的渣渣 mmap 实现可以让用户空间接触到内核空间）
  1 获取进程的 credentials，登记着进程uid
  2 扫描内存中刚好符合进程当前 credentials 信息的区域(即使匹配也可能是其他数据）
  3 修改扫描到的内存，uid/gid 设置为 0
  4 调用 getuid 确认是否提取成功
  5 如果成功，继续设置 capabilities 的位为 0xffffffffffffffff
  6 不成功，将 uid/gid 修改回原来的值
  7 获得 root 结束循环
这里作者附上一部分的影响因素
1 加固的kernel或者有监控组件的
2 虽然是 root，但是爆破影响了内核内存，没有了利用价值
3 一些安全模块，SElinux Smack 等，需要一些后续的绕过技术
作者简介了 SElinux 的绕过，替换规则文件，但是没有示例。

* 第一段基础代码示例，用户空间未经检查的参数，被 mmap 调用传递给 remap_pfn_range，用户空间可以访问到打大片的内核内存。结合/proc/$PID/maps 和 /proc/iomem 可以看到效果。（论防 infoleak 的重要性...）在内存中匹配 credentials。确认拿到root后直接执行一个 shell。
* 透过触发 fault 的方式进行漏洞利用
* 第二个版本

5. Tips and Tricks
* 建议
